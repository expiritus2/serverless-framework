service: 'auction-service'
frameworkVersion: '3'
plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline
  - serverless-stack-output
  - serverless-prune-plugin
  - serverless-esbuild
  - serverless-local-schedule
  - serverless-offline-aws-eventbridge

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-1
  stage: ${env:ENVORONMENT, 'dev'}
  memorySize: 128
  environment:
    AUCTIONS_TABLE_NAME: AuctionsTable
    USER_POOL_ID: { Ref: UserPool }
    CLIENT_ID: { Ref: UserClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource:
        - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AuctionsTable
        - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/eu-west-1_JP8SIasgl

resources:
  Resources:
    AuctionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AuctionsTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: endingAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: statusAndEndDate
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: endingAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: auctions-auth
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: [ "email" ]
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: auctions-client
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
functions:
  authorizerFn:
    handler: src/functions/auth/index.handler
  createAuction:
    handler: src/functions/createAuction/index.handler
    events:
      - http:
          method: POST
          path: /auction
          authorizer:
            name: authorizerFn
  #            resultTtlInSeconds: 0
  #            identitySource: method.request.header.Authorization
  #            identityValidationExpression: someRegex
  #            type: token
  getAuctions:
    handler: src/functions/getAuctions/index.handler
    events:
      - http:
          method: GET
          path: /auctions
          authorizer:
            name: authorizerFn
  getAuction:
    handler: src/functions/getAuction/index.handler
    events:
      - http:
          method: GET
          path: /auction/{id}
  placeBid:
    handler: src/functions/placeBid/index.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/bid
  processAuctions:
    handler: src/functions/processAuctions/index.handler
    events:
      - schedule: rate(1 minute)
      - http:
          method: GET
          path: /processAuctions
custom:
  bundle:
    linting: false
  webpack:
    webpackConfig: './webpack.config.js'
  packager: yarn
  excludeFiles: src/**/*.test.ts
